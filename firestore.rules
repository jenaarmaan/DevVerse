rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
  
    // Helper function to check if a user is a contributor to a project
    function isContributor(projectId, userId) {
      return exists(/databases/$(database)/documents/projects/$(projectId)/contributors/$(userId));
    }
    
    // Helper function to check if a user is the owner of a project
    function isOwner(projectId, userId) {
      return get(/databases/$(database)/documents/projects/$(projectId)).data.ownerId == userId;
    }

    // Rules for the 'users' collection
    match /users/{userId} {
      // Users can only read and write to their own document
      allow read, write: if request.auth.uid == userId;
      
      // Anyone can read a user's progress or projects if they are authenticated
      // This might be refined later if needed for privacy
      match /{subcollection}/{docId} {
        allow read: if request.auth.uid != null;
        allow write: if request.auth.uid == userId;
      }
    }
    
    // Rules for the 'projects' collection
    match /projects/{projectId} {
      // Allow reading a project if it's public, or if the user is the owner, or if they are a contributor
      allow read: if resource.data.visibility == "public" 
                    || isOwner(projectId, request.auth.uid) 
                    || isContributor(projectId, request.auth.uid);
                    
      // Allow creating a project if the user is authenticated and is setting themselves as the owner
      allow create: if request.auth.uid != null && request.resource.data.ownerId == request.auth.uid;
      
      // Allow updating or deleting a project ONLY if the user is the owner
      allow update, delete: if isOwner(projectId, request.auth.uid);

      // Rules for project subcollections
      match /{subcollection}/{docId} {
        // Only allow write access if the user is the owner or a contributor with 'Maintainer' role.
        // For now, we'll allow any contributor to write to prep for future features.
        // Reading is allowed if the user can read the parent project.
        allow write: if isOwner(projectId, request.auth.uid) || isContributor(projectId, request.auth.uid);
        allow read: if get(/databases/$(database)/documents/projects/$(projectId)).data.visibility == "public"
                      || isOwner(projectId, request.auth.uid)
                      || isContributor(projectId, request.auth.uid);
      }
    }
    
    // Default deny all other reads/writes
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
